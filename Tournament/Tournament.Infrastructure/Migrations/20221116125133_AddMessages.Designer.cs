// <auto-generated />
using System;
using FootballTournamentSystem.Tournament.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Tournament.Infrastructure.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20221116125133_AddMessages")]
    partial class AddMessages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serializedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Match.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchStatisticsId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerStatisticsId")
                        .HasColumnType("int");

                    b.Property<int?>("QuarterFinalsId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RefereeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RoundOf16Id")
                        .HasColumnType("int");

                    b.Property<int?>("SemiFinalsId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("QuarterFinalsId");

                    b.HasIndex("RoundOf16Id");

                    b.HasIndex("SemiFinalsId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Team.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CoachGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GroupPoints")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PresidentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("YearFounded")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MatchId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Final", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Finals");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.QuarterFinals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("QuarterFinals");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.RoundOf16", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("RoundOf16s");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.SemiFinals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SemiFinals");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FinalId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfTeams")
                        .HasColumnType("int");

                    b.Property<int?>("QuarterFinalsId")
                        .HasColumnType("int");

                    b.Property<int?>("RoundOf16Id")
                        .HasColumnType("int");

                    b.Property<int?>("SemiFinalsId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentStatisticsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalId");

                    b.HasIndex("QuarterFinalsId");

                    b.HasIndex("RoundOf16Id");

                    b.HasIndex("SemiFinalsId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Match.Match", b =>
                {
                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Group", null)
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.QuarterFinals", null)
                        .WithMany("Matches")
                        .HasForeignKey("QuarterFinalsId");

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.RoundOf16", null)
                        .WithMany("Matches")
                        .HasForeignKey("RoundOf16Id");

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.SemiFinals", null)
                        .WithMany("Matches")
                        .HasForeignKey("SemiFinalsId");

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Team.Team", b =>
                {
                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Group", null)
                        .WithMany("Teams")
                        .HasForeignKey("GroupId");

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Match.Match", null)
                        .WithMany("Teams")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Final", b =>
                {
                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Match.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Group", b =>
                {
                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Tournament", null)
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Tournament", b =>
                {
                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.Final", "Final")
                        .WithMany()
                        .HasForeignKey("FinalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.QuarterFinals", "QuarterFinals")
                        .WithMany()
                        .HasForeignKey("QuarterFinalsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.RoundOf16", "RoundOf16")
                        .WithMany()
                        .HasForeignKey("RoundOf16Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballTournamentSystem.Tournament.Domain.Models.Tournament.SemiFinals", "SemiFinals")
                        .WithMany()
                        .HasForeignKey("SemiFinalsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
